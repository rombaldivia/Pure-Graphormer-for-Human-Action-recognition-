
# ──────────────────────────────────────────────
# 70 / 20 / 10  estratificado sobre TODO NTU120
# ──────────────────────────────────────────────
import pickle, random
from pathlib import Path
from collections import defaultdict

# Ruta al pickle completo
PKL_IN  = Path(r"C:\Users\HP\PycharmProjects\TESTNTU\mmaction2\data\ntu120\ntu120_3d_merged.pkl")
# Salida con los nuevos splits
PKL_OUT = PKL_IN.with_name("ntu120_3d_701020.pkl")

VAL_PCT, TEST_PCT = 0.20, 0.10        # 20 % val | 10 % test
SEED = 42                             # reproducibilidad
# ──────────────────────────────────────────────
random.seed(SEED)

with PKL_IN.open("rb") as f:
    db = pickle.load(f)

ann     = db["annotations"]                          # lista de dicts
labels  = [a["label"] for a in ann]
frame2cls = defaultdict(list)
for idx, a in enumerate(ann):
    frame2cls[labels[idx]].append(a["frame_dir"])    # agrupa por clase

train, val, test = [], [], []

for fds in frame2cls.values():
    random.shuffle(fds)
    n       = len(fds)
    n_val   = int(n * VAL_PCT)
    n_test  = int(n * TEST_PCT)
    val.extend( fds[:n_val] )
    test.extend( fds[n_val : n_val + n_test] )
    train.extend( fds[n_val + n_test:] )

# Guarda los nuevos splits sin tocar los oficiales
db["split"].update({
    "train": train,
    "val":   val,
    "test":  test,
})

with PKL_OUT.open("wb") as f:
    pickle.dump(db, f)

total = len(train) + len(val) + len(test)
print("✓ Guardado en:", PKL_OUT)
print(f"  train: {len(train):6d}  ({len(train)/total*100:5.2f} %)")
print(f"  val  : {len(val):6d}  ({len(val)/total*100:5.2f} %)")
print(f"  test : {len(test):6d}  ({len(test)/total*100:5.2f} %)")
